{
  "version": 3,
  "sources": ["../src/tileRenderer.ts", "../src/tilingEngine.ts", "../src/index.ts"],
  "sourcesContent": ["import type { Tile } from \"./tilingEngine\";\n\nexport const renderTiles = (\n  tiles: Array<Tile>,\n  context: CanvasRenderingContext2D\n) => {\n  tiles.forEach((tile) => renderTile(tile, context));\n};\n\nconst renderTile = (\n  { topLeft, bottomRight }: Tile,\n  context: CanvasRenderingContext2D\n) => {\n  context.strokeStyle = \"black\";\n  context.lineWidth = 2;\n  context.beginPath();\n  context.roundRect(\n    topLeft.x,\n    topLeft.y,\n    bottomRight.x - topLeft.x,\n    bottomRight.y - topLeft.y,\n    10\n  );\n  context.fillStyle = \"rgba(0, 0, 0, 0.34)\";\n  context.fill();\n  context.stroke();\n};\n", "type Position = { x: number; y: number };\nexport type Tile = { topLeft: Position; bottomRight: Position };\n\nexport const dummy = (): Array<Tile> => {\n  return Array.from({ length: 10 }, () => {\n    const x = Math.floor(Math.random() * 10) * 100;\n    const y = Math.floor(Math.random() * 10) * 100;\n    return {\n      topLeft: { x, y },\n      bottomRight: { x: x + 100, y: y + 200 },\n    };\n  });\n};\n\nconst isEqual = (a: { x: number; y: number }, b: { x: number; y: number }) => {\n  return a.x === b.x && a.y === b.y;\n};\n\nexport const generateTiles = (): Array<Tile> => {\n  let availableLocations: Array<{ x: number; y: number }> = [];\n  for (let x = 0; x <= 10; x++) {\n    for (let y = 0; y <= 10; y++) {\n      availableLocations.push({ x, y });\n    }\n  }\n\n  let tiles: Array<Tile> = [];\n  let retries = 0;\n  while (retries < 5) {\n    const randomIndex = Math.floor(Math.random() * availableLocations.length);\n    const location = availableLocations[randomIndex];\n    const neighbours = [\n      { x: location.x + 1, y: location.y },\n      { x: location.x - 1, y: location.y },\n      { x: location.x, y: location.y + 1 },\n      { x: location.x, y: location.y - 1 },\n    ].filter((location) =>\n      availableLocations.some((other) => isEqual(location, other))\n    );\n    if (neighbours.length === 0) {\n      // We failed to find an available neighbour\n      // So we reset this loop and try again\n      retries++;\n      continue;\n    } else {\n      // We successfully placed a tile, so we reset retries\n      retries = 0;\n    }\n\n    const neighbour = neighbours[Math.floor(Math.random() * neighbours.length)];\n\n    const [firstHalf, secondHalf] = [location, neighbour].sort((a, b) =>\n      // Ascending on X, tiebreak on ascending Y\n      a.x === b.x ? a.y - b.y : a.x - b.x\n    );\n    tiles.push({\n      // We have a pair of x,y coordinates in 0-9 range\n      // We want to convert them into pixel coordinates in 0-1000 range\n      topLeft: { x: firstHalf.x * 100, y: firstHalf.y * 100 },\n      bottomRight: { x: secondHalf.x * 100 + 100, y: secondHalf.y * 100 + 100 },\n    });\n    availableLocations = availableLocations.filter(\n      (loc) => !isEqual(loc, location) && !isEqual(loc, neighbour)\n    );\n  }\n\n  return tiles;\n};\n", "import { renderTiles } from \"./tileRenderer\";\nimport { generateTiles } from \"./tilingEngine\";\n\nconst generateButton = document.getElementById(\"generate-button\")!;\nconst canvasElement = document.querySelector(\"canvas\")!;\nconst canvasContext = canvasElement.getContext(\"2d\")!;\n\nconst paintRandomTiles = () => {\n  canvasContext.clearRect(0, 0, canvasElement.width, canvasElement.height);\n  const tiles = generateTiles();\n  renderTiles(tiles, canvasContext);\n};\n\ngenerateButton.addEventListener(\"click\", paintRandomTiles);\npaintRandomTiles();\n"],
  "mappings": "MAEO,IAAMA,EAAc,CACzBC,EACAC,IACG,CACHD,EAAM,QAASE,GAASC,EAAWD,EAAMD,CAAO,CAAC,CACnD,EAEME,EAAa,CACjB,CAAE,QAAAC,EAAS,YAAAC,CAAY,EACvBJ,IACG,CACHA,EAAQ,YAAc,QACtBA,EAAQ,UAAY,EACpBA,EAAQ,UAAU,EAClBA,EAAQ,UACNG,EAAQ,EACRA,EAAQ,EACRC,EAAY,EAAID,EAAQ,EACxBC,EAAY,EAAID,EAAQ,EACxB,EACF,EACAH,EAAQ,UAAY,sBACpBA,EAAQ,KAAK,EACbA,EAAQ,OAAO,CACjB,ECZA,IAAMK,EAAU,CAACC,EAA6BC,IACrCD,EAAE,IAAMC,EAAE,GAAKD,EAAE,IAAMC,EAAE,EAGrBC,EAAgB,IAAmB,CAC9C,IAAIC,EAAsD,CAAC,EAC3D,QAASC,EAAI,EAAGA,GAAK,GAAIA,IACvB,QAASC,EAAI,EAAGA,GAAK,GAAIA,IACvBF,EAAmB,KAAK,CAAE,EAAAC,EAAG,EAAAC,CAAE,CAAC,EAIpC,IAAIC,EAAqB,CAAC,EACtBC,EAAU,EACd,KAAOA,EAAU,GAAG,CAClB,IAAMC,EAAc,KAAK,MAAM,KAAK,OAAO,EAAIL,EAAmB,MAAM,EAClEM,EAAWN,EAAmBK,CAAW,EACzCE,EAAa,CACjB,CAAE,EAAGD,EAAS,EAAI,EAAG,EAAGA,EAAS,CAAE,EACnC,CAAE,EAAGA,EAAS,EAAI,EAAG,EAAGA,EAAS,CAAE,EACnC,CAAE,EAAGA,EAAS,EAAG,EAAGA,EAAS,EAAI,CAAE,EACnC,CAAE,EAAGA,EAAS,EAAG,EAAGA,EAAS,EAAI,CAAE,CACrC,EAAE,OAAQA,GACRN,EAAmB,KAAMQ,GAAUZ,EAAQU,EAAUE,CAAK,CAAC,CAC7D,EACA,GAAID,EAAW,SAAW,EAAG,CAG3BH,IACA,QACF,MAEEA,EAAU,EAGZ,IAAMK,EAAYF,EAAW,KAAK,MAAM,KAAK,OAAO,EAAIA,EAAW,MAAM,CAAC,EAEpE,CAACG,EAAWC,CAAU,EAAI,CAACL,EAAUG,CAAS,EAAE,KAAK,CAACZ,EAAGC,IAE7DD,EAAE,IAAMC,EAAE,EAAID,EAAE,EAAIC,EAAE,EAAID,EAAE,EAAIC,EAAE,CACpC,EACAK,EAAM,KAAK,CAGT,QAAS,CAAE,EAAGO,EAAU,EAAI,IAAK,EAAGA,EAAU,EAAI,GAAI,EACtD,YAAa,CAAE,EAAGC,EAAW,EAAI,IAAM,IAAK,EAAGA,EAAW,EAAI,IAAM,GAAI,CAC1E,CAAC,EACDX,EAAqBA,EAAmB,OACrCY,GAAQ,CAAChB,EAAQgB,EAAKN,CAAQ,GAAK,CAACV,EAAQgB,EAAKH,CAAS,CAC7D,CACF,CAEA,OAAON,CACT,EChEA,IAAMU,EAAiB,SAAS,eAAe,iBAAiB,EAC1DC,EAAgB,SAAS,cAAc,QAAQ,EAC/CC,EAAgBD,EAAc,WAAW,IAAI,EAE7CE,EAAmB,IAAM,CAC7BD,EAAc,UAAU,EAAG,EAAGD,EAAc,MAAOA,EAAc,MAAM,EACvE,IAAMG,EAAQC,EAAc,EAC5BC,EAAYF,EAAOF,CAAa,CAClC,EAEAF,EAAe,iBAAiB,QAASG,CAAgB,EACzDA,EAAiB",
  "names": ["renderTiles", "tiles", "context", "tile", "renderTile", "topLeft", "bottomRight", "isEqual", "a", "b", "generateTiles", "availableLocations", "x", "y", "tiles", "retries", "randomIndex", "location", "neighbours", "other", "neighbour", "firstHalf", "secondHalf", "loc", "generateButton", "canvasElement", "canvasContext", "paintRandomTiles", "tiles", "generateTiles", "renderTiles"]
}
